package

public fun main(/*0*/ aNotNullNotNullNotNull: A<kotlin.String, kotlin.String, kotlin.String>, /*1*/ aNotNullNotNullNull: A<kotlin.String, kotlin.String, kotlin.String?>, /*2*/ aNotNullNullNotNull: A<kotlin.String, kotlin.String?, kotlin.String>, /*3*/ aNotNullNullNull: A<kotlin.String, kotlin.String?, kotlin.String?>, /*4*/ aAnyNotNullNotNullNotNull: A<kotlin.Any, kotlin.Any, kotlin.Any>, /*5*/ aAnyNotNullNotNullNull: A<kotlin.Any, kotlin.Any, kotlin.Any?>, /*6*/ aAnyNotNullNullNotNull: A<kotlin.Any, kotlin.Any?, kotlin.Any>, /*7*/ aAnyNotNullNullNull: A<kotlin.Any, kotlin.Any?, kotlin.Any?>, /*8*/ b: B): kotlin.Unit

public open class A</*0*/ T : @org.jspecify.annotations.NotNull kotlin.Any!, /*1*/ E : @org.jspecify.annotations.Nullable kotlin.Any!, /*2*/ F : @org.jspecify.annotations.NullnessUnspecified kotlin.Any!> {
    public constructor A</*0*/ T : @org.jspecify.annotations.NotNull kotlin.Any!, /*1*/ E : @org.jspecify.annotations.Nullable kotlin.Any!, /*2*/ F : @org.jspecify.annotations.NullnessUnspecified kotlin.Any!>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class B {
    public constructor B()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open fun extendsAsIs(/*0*/ a: A<out kotlin.CharSequence!, out kotlin.CharSequence!, out kotlin.CharSequence!>!): kotlin.Unit
    public open fun extendsNotNull(/*0*/ a: A<out @org.jspecify.annotations.NotNull kotlin.CharSequence!, out @org.jspecify.annotations.NotNull kotlin.CharSequence!, out @org.jspecify.annotations.NotNull kotlin.CharSequence!>!): kotlin.Unit
    public open fun extendsNullable(/*0*/ a: A<out @org.jspecify.annotations.Nullable kotlin.CharSequence!, out @org.jspecify.annotations.Nullable kotlin.CharSequence!, out @org.jspecify.annotations.Nullable kotlin.CharSequence!>!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open fun noBounds(/*0*/ a: A<*, *, *>!): kotlin.Unit
    public open fun superAsIs(/*0*/ a: A<in kotlin.CharSequence!, in kotlin.CharSequence!, in kotlin.CharSequence!>!): kotlin.Unit
    public open fun superNotNull(/*0*/ a: A<in @org.jspecify.annotations.NotNull kotlin.CharSequence!, in @org.jspecify.annotations.NotNull kotlin.CharSequence!, in @org.jspecify.annotations.NotNull kotlin.CharSequence!>!): kotlin.Unit
    public open fun superNullable(/*0*/ a: A<in @org.jspecify.annotations.Nullable kotlin.CharSequence!, in @org.jspecify.annotations.Nullable kotlin.CharSequence!, in @org.jspecify.annotations.Nullable kotlin.CharSequence!>!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
